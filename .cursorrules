# Ghost Studio - Course Management Platform

## Project Overview
A comprehensive course management platform with subscription and individual course purchase options, featuring a dark theme and modern UI.

### Core Features
1. Course Management
   - Free courses
   - Paid courses (Flouci payment in TND)
   - Subscription-based courses (Stripe payment in USD)
   - Course content organization (chapters, lessons)
   - Video and file content support from AWS S3
   - CloudFront video delivery

2. User Management
   - User authentication with email verification
   - Role-based access (admin/user)
   - User profile management
   - Purchase history tracking

3. Payment Integration
   - Stripe for USD subscriptions
   - Flouci for TND individual course purchases
   - Payment verification system
   - Purchase history
   - Multi-currency support

4. AWS Integration
   - S3 for video storage
   - CloudFront for content delivery
   - Secure video streaming
   - File management system

## Technology Stack
- Next.js 14 (App Router)
- Firebase (Authentication & Realtime Database)
- Stripe API (Subscription payments)
- Flouci API (Individual course payments)
- AWS S3 & CloudFront
- TypeScript
- Tailwind CSS
- Shadcn UI
- Lucide Icons

## Security Features
1. Firebase Rules
   - Role-based access control
   - Content access validation
   - Payment verification
   - User data protection

2. AWS Security
   - Secure video delivery
   - CloudFront signed URLs
   - S3 bucket policies
   - Access key management

## Unique Features
1. Dual Payment System
   - USD payments via Stripe
   - TND payments via Flouci
   - Automatic currency handling

2. Video Management
   - Secure video streaming
   - CloudFront CDN delivery
   - Multiple format support
   - Adaptive bitrate streaming

3. User Experience
   - Dark theme design
   - Responsive layout
   - Modern UI components
   - Ghost Studio branding

## Future Enhancements
1. Content Enhancement
   - Add course progress tracking
   - Implement course completion certificates
   - Add interactive quizzes and assessments
   - Support for course discussions/comments
   - Course ratings and reviews system
   - Course recommendations based on user interests

2. User Experience
   - Add dark/light mode toggle animations
   - Implement course preview feature
   - Add course bookmarking
   - Add course sharing functionality
   - Implement course search filters
   - Add course categories navigation
   - Add loading skeletons for better UX

3. Social Features
   - Add instructor profiles
   - Implement student-instructor messaging
   - Add course discussion forums
   - Create student study groups
   - Add social media sharing

4. Learning Features
   - Add note-taking functionality
   - Implement course roadmaps
   - Add learning path recommendations
   - Create achievement badges
   - Add progress milestones
   - Implement spaced repetition learning

5. Technical Improvements
   - Implement video streaming optimization
   - Add offline course access
   - Implement file compression for uploads
   - Add real-time collaboration features
   - Implement WebSocket for real-time updates
   - Add analytics dashboard
   - Implement caching strategies

6. Mobile Experience
   - Create mobile app version
   - Add offline video download
   - Implement push notifications
   - Add mobile-specific UI/UX
   - Create mobile-first video player

7. Administrative Features
   - Add comprehensive admin dashboard
   - Implement user management tools
   - Add course analytics
   - Create revenue reports
   - Add content moderation tools
   - Implement bulk operations

8. Monetization Features
   - Add referral program
   - Implement affiliate system
   - Add course bundles
   - Create promotional codes
   - Implement gift cards
   - Add subscription tiers

9. Integration Ideas
   - Add Google Calendar integration
   - Implement Zoom/Meet integration
   - Add LinkedIn Learning integration
   - Implement GitHub student verification
   - Add portfolio generation

10. Security Enhancements
    - Implement 2FA
    - Add session management
    - Implement IP blocking
    - Add content encryption
    - Create backup system
    - Add audit logs

## Future Considerations
1. Internationalization support
2. AI-powered course recommendations
3. Virtual reality course content
4. Mobile app development
5. API marketplace for third-party integrations
6. Blockchain certificates
7. Machine learning for personalized learning paths
8. Live streaming capabilities
9. Automated course generation
10. Integration with learning management systems

## Code Organization
- Maintain consistent file structure
- Follow TypeScript best practices
- Implement proper error handling
- Add comprehensive documentation
- Follow accessibility guidelines
- Maintain test coverage

## Additional Features
4. Multi-language Support
   - Arabic interface
   - English interface
   - Dynamic language switching

5. Analytics & Reporting
   - Course engagement metrics
   - Revenue tracking
   - User progress analytics
   - Payment history reports

6. Content Protection
   - DRM for video content
   - Download restrictions
   - Access control by IP
   - Session management

7. Performance Optimization
   - CloudFront caching
   - Image optimization
   - Lazy loading
   - Code splitting

## Domestika Component Structure

### State Management
1. Course State
   - Basic course info (title, description, etc.)
   - Access type (free/subscription)
   - Chapters and content

2. Video Player State
   - Active video
   - Playback controls
   - Progress tracking
   - Volume controls

3. Subscription State
   - Subscription status
   - Loading state
   - Access verification

### Component Organization
1. Main Sections
   - Course Information
   - Video Player
   - Chapter Management
   - Access Control
   - Theme Toggle

2. File Structure
   /components/course-creator/
   ├── components/
   │   ├── domestika-creator.tsx
   │   ├── video-player/
   │   │   ├── controls.tsx
   │   │   └── progress-bar.tsx
   │   └── chapter-manager/
   ├── hooks/
   │   └── use-subscription.ts
   └── lib/
       ├── subscription-handlers/
       └── course-operations/

### Code Guidelines
1. State Management
   - Use separate hooks for complex state
   - Implement proper type checking
   - Handle loading states

2. Error Handling
   - Implement try-catch blocks
   - Show user-friendly error messages
   - Log errors for debugging

3. Performance
   - Implement proper memoization
   - Use lazy loading for videos
   - Optimize re-renders

# Project Structure Rules

## Components
1. File Organization
   - /components/[feature]/
   - /hooks/
   - /lib/
   - /types/

2. Naming Conventions
   - Components: PascalCase
   - Files: kebab-case
   - Functions: camelCase

3. State Management
   - Use hooks for complex state
   - Implement proper loading states
   - Handle errors gracefully

4. Performance
   - Implement lazy loading
   - Use proper memoization
   - Optimize images and assets

5. Security
   - Validate user roles
   - Sanitize inputs
   - Protect API routes

6. Error Handling
   - Use try/catch blocks
   - Display user-friendly errors
   - Log errors properly

7. Code Style
   - Follow ESLint rules
   - Use TypeScript strictly
   - Document complex logic

8. Testing
   - Write unit tests
   - Test error cases
   - Test user interactions

9. Deployment
   - Use environment variables
   - Optimize build process
   - Monitor performance

# Performance Optimizations

## Caching Strategy
- Use CacheManager for in-memory caching
- Cache CloudFront URLs for 1 hour
- Cache video metadata for 24 hours
- Implement automatic cache cleanup

## Firebase Optimization
- Store minimal metadata in Firebase
- Use CloudFront for video delivery
- Implement lazy loading for content
- Cache frequently accessed data

## Video Playback
- Adaptive quality based on network
- Preload next video metadata
- Use signed URLs with CloudFront
- Implement progress tracking

## Code Organization
- Keep related functionality together
- Add comprehensive comments
- Follow TypeScript best practices
- Implement error handling

## Maintenance Instructions
1. Cache Management
   - Review cache TTLs periodically
   - Monitor cache hit rates
   - Clear cache on version updates

2. Firebase Usage
   - Monitor database size
   - Review security rules
   - Optimize queries

3. Video Delivery
   - Monitor CloudFront usage
   - Update signing keys
   - Check video encoding

4. Error Handling
   - Log errors properly
   - Implement fallbacks
   - Monitor error rates

# AWS S3 Configuration Files

## Core S3 Files
- src/app/components/course-creator/lib/aws/s3-config.ts
  - Main S3 configuration and operations
  - Contains uploadToS3, getPresignedUploadUrl, getS3Url functions
  - Uses caching for optimized performance

- src/lib/s3.ts
  - Root S3 configuration for index.html and static files
  - Handles initial setup and public files
  - Contains uploadRootIndexFile and uploadInitialFiles functions

## CloudFront Integration
- src/app/components/course-creator/lib/aws/cloudfront-config.ts
  - CloudFront configuration for video delivery
  - Handles signed URLs and cache invalidation
  - Supports multiple origins (main, backup, public)

## Cache Management
- src/app/lib/cache-manager.ts
  - Centralized cache management
  - Used by S3 and CloudFront operations
  - Handles TTL and cache invalidation

## Video Service
- src/app/lib/video-service.ts
  - Video-specific operations using S3 and CloudFront
  - Handles video URL generation and preloading
  - Integrates with caching system

## API Routes
- src/app/api/video/route.ts
  - API endpoint for video URL generation
  - Uses CloudFront for secure video delivery

## Component Integration
- src/app/components/course-creator/components/domestika-creator.tsx
  - Main component using S3 for file uploads
  - Integrates with video player and course management

## Important Notes
1. S3 Bucket Structure:
   - /videos/ - Course video content
   - /public/ - Publicly accessible files
   - /backup/ - Backup storage
   - / (root) - Static files (index.html, css, js)

2. Environment Variables:
   - AWS_REGION
   - AWS_S3_BUCKET
   - AWS_ACCESS_KEY_ID
   - AWS_SECRET_ACCESS_KEY
   - CLOUDFRONT_KEY_PAIR_ID
   - CLOUDFRONT_PRIVATE_KEY

3. Caching Strategy:
   - Video URLs: 1 hour
   - Public URLs: 24 hours
   - Presigned URLs: 1 hour
   - Upload URLs: 1 hour

4. Security:
   - Private content uses signed URLs
   - Public content uses direct S3 URLs
   - ACL set to 'public-read' for necessary files

5. Maintenance Tasks:
   - Regular cache cleanup
   - CloudFront invalidation when needed
   - Monitor S3 bucket size and usage
   - Check CloudFront distribution status

## Future Enhancements
1. Add support for multi-region deployment
2. Implement automatic backup system
3. Add video transcoding support
4. Improve caching strategy
5. Add analytics and monitoring

## Troubleshooting
1. Check S3 permissions and policies
2. Verify CloudFront distribution settings
3. Monitor cache hit/miss rates
4. Check environment variables
5. Review access logs

## S3 Configuration Guide

1. Required Environment Variables:
   - MY_AWS_ACCESS_KEY_ID: AWS access key
   - MY_AWS_SECRET_ACCESS_KEY: AWS secret key
   - NEXT_PUBLIC_AWS_REGION: AWS region (e.g. eu-north-1)
   - NEXT_PUBLIC_S3_BUCKET: S3 bucket name
   - NEXT_PUBLIC_CLOUDFRONT_DOMAIN: CloudFront domain (optional)

2. Security Best Practices:
   - Never expose AWS credentials in client-side code
   - Use environment variables for sensitive data
   - Configure CORS properly on S3 bucket
   - Set appropriate bucket policies
   - Enable server-side encryption

3. Error Prevention:
   - Always check for credentials before initializing S3 client
   - Handle missing environment variables gracefully
   - Implement proper error boundaries in React components
   - Add logging for debugging purposes

4. Maintenance Tasks:
   - Monitor S3 bucket usage and costs
   - Regularly rotate AWS credentials
   - Clean up unused files
   - Update CORS configuration as needed
   - Check CloudFront cache settings

5. Common Issues:
   - "AWS credentials are required": Check environment variables
   - CORS errors: Update bucket CORS policy
   - Upload failures: Check file permissions
   - URL expiration: Adjust presigned URL duration

# AWS S3 Setup Instructions

## Initial Setup
1. Create S3 Bucket
   - Region: eu-north-1
   - Enable versioning
   - Configure CORS
   - Set up lifecycle rules

2. CloudFront Configuration
   - Create distribution
   - Configure SSL/TLS
   - Set up origin access identity
   - Configure cache behaviors

3. IAM Configuration
   - Create service account
   - Set up bucket policies
   - Configure access keys

## Project Structure Updates

### Video Player Integration
1. Components
   - /components/video-player/
     ├── index.tsx
     ├── controls.tsx
     ├── progress.tsx
     └── cache.ts

2. Caching Strategy
   - Use CacheManager for URLs
   - Cache video metadata
   - Implement preloading
   - Handle cleanup

### Storage Optimization
1. Firebase Usage
   - Store minimal metadata
   - Move media to S3
   - Use references only
   - Implement lazy loading

2. S3 Organization
   - /videos/[courseId]/
   - /thumbnails/
   - /attachments/
   - /backups/

## Current Tasks

1. Video Player Implementation
   - Add player component
   - Implement controls
   - Add progress tracking
   - Handle caching

2. Storage Migration
   - Move files to S3
   - Update references
   - Clean Firebase storage
   - Verify migrations

3. Caching Implementation
   - Set up CacheManager
   - Configure